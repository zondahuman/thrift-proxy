/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abin.lee.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class HelloInfo implements org.apache.thrift.TBase<HelloInfo, HelloInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HelloInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HelloInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GREETINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("greetings", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operateType", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HelloInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HelloInfoTupleSchemeFactory());
  }

  public int id; // required
  public String greetings; // required
  public Map<Integer,String> words; // required
  /**
   * 
   * @see com.abin.lee.thrift.enums.OperateType
   */
  public com.abin.lee.thrift.enums.OperateType operateType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    GREETINGS((short)2, "greetings"),
    WORDS((short)3, "words"),
    /**
     * 
     * @see com.abin.lee.thrift.enums.OperateType
     */
    OPERATE_TYPE((short)4, "operateType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GREETINGS
          return GREETINGS;
        case 3: // WORDS
          return WORDS;
        case 4: // OPERATE_TYPE
          return OPERATE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GREETINGS, new org.apache.thrift.meta_data.FieldMetaData("greetings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPERATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.abin.lee.thrift.enums.OperateType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloInfo.class, metaDataMap);
  }

  public HelloInfo() {
  }

  public HelloInfo(
    int id,
    String greetings,
    Map<Integer,String> words,
    com.abin.lee.thrift.enums.OperateType operateType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.greetings = greetings;
    this.words = words;
    this.operateType = operateType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HelloInfo(HelloInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetGreetings()) {
      this.greetings = other.greetings;
    }
    if (other.isSetWords()) {
      Map<Integer,String> __this__words = new HashMap<Integer,String>(other.words);
      this.words = __this__words;
    }
    if (other.isSetOperateType()) {
      this.operateType = other.operateType;
    }
  }

  public HelloInfo deepCopy() {
    return new HelloInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.greetings = null;
    this.words = null;
    this.operateType = null;
  }

  public int getId() {
    return this.id;
  }

  public HelloInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getGreetings() {
    return this.greetings;
  }

  public HelloInfo setGreetings(String greetings) {
    this.greetings = greetings;
    return this;
  }

  public void unsetGreetings() {
    this.greetings = null;
  }

  /** Returns true if field greetings is set (has been assigned a value) and false otherwise */
  public boolean isSetGreetings() {
    return this.greetings != null;
  }

  public void setGreetingsIsSet(boolean value) {
    if (!value) {
      this.greetings = null;
    }
  }

  public int getWordsSize() {
    return (this.words == null) ? 0 : this.words.size();
  }

  public void putToWords(int key, String val) {
    if (this.words == null) {
      this.words = new HashMap<Integer,String>();
    }
    this.words.put(key, val);
  }

  public Map<Integer,String> getWords() {
    return this.words;
  }

  public HelloInfo setWords(Map<Integer,String> words) {
    this.words = words;
    return this;
  }

  public void unsetWords() {
    this.words = null;
  }

  /** Returns true if field words is set (has been assigned a value) and false otherwise */
  public boolean isSetWords() {
    return this.words != null;
  }

  public void setWordsIsSet(boolean value) {
    if (!value) {
      this.words = null;
    }
  }

  /**
   * 
   * @see com.abin.lee.thrift.enums.OperateType
   */
  public com.abin.lee.thrift.enums.OperateType getOperateType() {
    return this.operateType;
  }

  /**
   * 
   * @see com.abin.lee.thrift.enums.OperateType
   */
  public HelloInfo setOperateType(com.abin.lee.thrift.enums.OperateType operateType) {
    this.operateType = operateType;
    return this;
  }

  public void unsetOperateType() {
    this.operateType = null;
  }

  /** Returns true if field operateType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateType() {
    return this.operateType != null;
  }

  public void setOperateTypeIsSet(boolean value) {
    if (!value) {
      this.operateType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case GREETINGS:
      if (value == null) {
        unsetGreetings();
      } else {
        setGreetings((String)value);
      }
      break;

    case WORDS:
      if (value == null) {
        unsetWords();
      } else {
        setWords((Map<Integer,String>)value);
      }
      break;

    case OPERATE_TYPE:
      if (value == null) {
        unsetOperateType();
      } else {
        setOperateType((com.abin.lee.thrift.enums.OperateType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case GREETINGS:
      return getGreetings();

    case WORDS:
      return getWords();

    case OPERATE_TYPE:
      return getOperateType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case GREETINGS:
      return isSetGreetings();
    case WORDS:
      return isSetWords();
    case OPERATE_TYPE:
      return isSetOperateType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HelloInfo)
      return this.equals((HelloInfo)that);
    return false;
  }

  public boolean equals(HelloInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_greetings = true && this.isSetGreetings();
    boolean that_present_greetings = true && that.isSetGreetings();
    if (this_present_greetings || that_present_greetings) {
      if (!(this_present_greetings && that_present_greetings))
        return false;
      if (!this.greetings.equals(that.greetings))
        return false;
    }

    boolean this_present_words = true && this.isSetWords();
    boolean that_present_words = true && that.isSetWords();
    if (this_present_words || that_present_words) {
      if (!(this_present_words && that_present_words))
        return false;
      if (!this.words.equals(that.words))
        return false;
    }

    boolean this_present_operateType = true && this.isSetOperateType();
    boolean that_present_operateType = true && that.isSetOperateType();
    if (this_present_operateType || that_present_operateType) {
      if (!(this_present_operateType && that_present_operateType))
        return false;
      if (!this.operateType.equals(that.operateType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_greetings = true && (isSetGreetings());
    list.add(present_greetings);
    if (present_greetings)
      list.add(greetings);

    boolean present_words = true && (isSetWords());
    list.add(present_words);
    if (present_words)
      list.add(words);

    boolean present_operateType = true && (isSetOperateType());
    list.add(present_operateType);
    if (present_operateType)
      list.add(operateType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(HelloInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGreetings()).compareTo(other.isSetGreetings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGreetings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.greetings, other.greetings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateType()).compareTo(other.isSetOperateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateType, other.operateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HelloInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("greetings:");
    if (this.greetings == null) {
      sb.append("null");
    } else {
      sb.append(this.greetings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("words:");
    if (this.words == null) {
      sb.append("null");
    } else {
      sb.append(this.words);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateType:");
    if (this.operateType == null) {
      sb.append("null");
    } else {
      sb.append(this.operateType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HelloInfoStandardSchemeFactory implements SchemeFactory {
    public HelloInfoStandardScheme getScheme() {
      return new HelloInfoStandardScheme();
    }
  }

  private static class HelloInfoStandardScheme extends StandardScheme<HelloInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HelloInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GREETINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.greetings = iprot.readString();
              struct.setGreetingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.words = new HashMap<Integer,String>(2*_map0.size);
                int _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readString();
                  struct.words.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operateType = com.abin.lee.thrift.enums.OperateType.findByValue(iprot.readI32());
              struct.setOperateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HelloInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.greetings != null) {
        oprot.writeFieldBegin(GREETINGS_FIELD_DESC);
        oprot.writeString(struct.greetings);
        oprot.writeFieldEnd();
      }
      if (struct.words != null) {
        oprot.writeFieldBegin(WORDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.words.size()));
          for (Map.Entry<Integer, String> _iter4 : struct.words.entrySet())
          {
            oprot.writeI32(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.operateType != null) {
        oprot.writeFieldBegin(OPERATE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.operateType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HelloInfoTupleSchemeFactory implements SchemeFactory {
    public HelloInfoTupleScheme getScheme() {
      return new HelloInfoTupleScheme();
    }
  }

  private static class HelloInfoTupleScheme extends TupleScheme<HelloInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HelloInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetGreetings()) {
        optionals.set(1);
      }
      if (struct.isSetWords()) {
        optionals.set(2);
      }
      if (struct.isSetOperateType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetGreetings()) {
        oprot.writeString(struct.greetings);
      }
      if (struct.isSetWords()) {
        {
          oprot.writeI32(struct.words.size());
          for (Map.Entry<Integer, String> _iter5 : struct.words.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetOperateType()) {
        oprot.writeI32(struct.operateType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HelloInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.greetings = iprot.readString();
        struct.setGreetingsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.words = new HashMap<Integer,String>(2*_map6.size);
          int _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readI32();
            _val8 = iprot.readString();
            struct.words.put(_key7, _val8);
          }
        }
        struct.setWordsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operateType = com.abin.lee.thrift.enums.OperateType.findByValue(iprot.readI32());
        struct.setOperateTypeIsSet(true);
      }
    }
  }

}

